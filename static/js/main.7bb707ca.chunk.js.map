{"version":3,"sources":["components/ListItemLink.tsx","components/CategoryList.tsx","components/CustomLayout.tsx","components/TaskAdd.tsx","components/Task.tsx","views/Tasks.tsx","components/LastTasks.tsx","views/Home.tsx","App.tsx","database.ts","serviceWorker.ts","index.tsx"],"names":["ListItemLink","props","primary","to","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","ListItemText","CategoryList","categories","state","showcategdialog","newcategtext","openNewCategDialog","bind","closeNewCategDialog","addCategory","db","table","each","t","includes","category","push","then","setState","this","e","target","value","map","c","index","key","onClick","Dialog","open","onClose","DialogTitle","DialogContent","TextField","placeholder","onChange","handleNewCategChange","DialogActions","Button","color","Component","useStyles","makeStyles","theme","createStyles","menuButton","marginRight","spacing","title","flexGrow","drawerList","width","CustomAppbar","classes","useState","drawerState","setDrawerState","toggleDrawer","AppBar","position","Toolbar","IconButton","edge","className","aria-label","Menu","Typography","variant","Drawer","anchor","List","floatbtn","top","left","modalbtn","TaskAdd","showDialog","setShowDialog","taskName","setTaskName","loading","setLoading","Fab","Add","aria-labelledby","id","window","location","pathname","replace","add","name","completed","created_at","Date","updated_at","updateTasks","Backdrop","CircularProgress","Task","setCompleted","deleting","setDeleting","ListItemIcon","update","CheckCircleOutline","RadioButtonUnchecked","secondary","ListItemSecondaryAction","delete","size","Delete","Tasks","tasks","mounted","lastUrl","urlCateg","where","toArray","LastTasks","orderBy","i","Home","version","stores","Dexie","root","App","Container","maxWidth","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7bb707ca.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Link as RouterLink,\n  LinkProps as RouterLinkProps,\n} from \"react-router-dom\";\nimport { ListItem, ListItemText } from \"@material-ui/core\";\n\ntype ListItemLinkProps = {\n  primary: string;\n  to: string;\n};\n\nexport default function ListItemLink(props: ListItemLinkProps) {\n  const { primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef<any, Omit<RouterLinkProps, \"to\">>((itemProps, ref) => (\n        <RouterLink to={to} ref={ref} {...itemProps} />\n      )),\n    [to]\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport {\n  ListItem,\n  ListItemText,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n} from \"@material-ui/core\";\nimport { db } from \"../App\";\nimport ListItemLink from \"./ListItemLink\";\n\ntype State = {\n  categories: string[];\n  showcategdialog: boolean;\n  newcategtext: string;\n};\n\nexport default class CategoryList extends React.Component<{}, State> {\n  categories: string[] = [];\n  state: State;\n  constructor(props = {}) {\n    super(props);\n    this.state = {\n      categories: this.categories,\n      showcategdialog: false,\n      newcategtext: \"\",\n    };\n    this.openNewCategDialog = this.openNewCategDialog.bind(this);\n    this.closeNewCategDialog = this.closeNewCategDialog.bind(this);\n    this.addCategory = this.addCategory.bind(this);\n    db.table(\"tasks\")\n      .each((t) => {\n        if (!this.categories.includes(t.category))\n          this.categories.push(t.category);\n      })\n      .then(() => this.setState({ categories: this.categories }));\n  }\n  componentDidMount() {}\n  openNewCategDialog() {\n    this.setState((state) => ({\n      showcategdialog: true,\n    }));\n  }\n  closeNewCategDialog() {\n    this.setState((state) => ({\n      showcategdialog: false,\n    }));\n  }\n  handleNewCategChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      newcategtext: e.target.value,\n    });\n  }\n  addCategory() {\n    this.categories.push(this.state.newcategtext);\n    this.setState((state) => ({\n      categories: this.categories,\n      newcategtext: \"\",\n      showcategdialog: false,\n    }));\n  }\n  render() {\n    return (\n      <Fragment>\n        {this.categories.map((c, index) => {\n          return <ListItemLink key={index} primary={c} to={`/c/${c}`} />;\n        })}\n        <ListItem button onClick={this.openNewCategDialog}>\n          <ListItemText>Add category</ListItemText>\n        </ListItem>\n        <Dialog\n          open={this.state.showcategdialog}\n          onClose={this.closeNewCategDialog}\n        >\n          <DialogTitle>Add a category</DialogTitle>\n          <DialogContent>\n            <TextField\n              placeholder=\"Category name\"\n              value={this.state.newcategtext}\n              onChange={this.handleNewCategChange.bind(this)}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"primary\" onClick={this.addCategory}>\n              Add\n            </Button>\n            <Button\n              color=\"secondary\"\n              onClick={this.closeNewCategDialog.bind(this)}\n            >\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport {\n  makeStyles,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Theme,\n  createStyles,\n  Drawer,\n  List,\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport ListItemLink from \"./ListItemLink\";\nimport CategoryList from \"./CategoryList\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    drawerList: {\n      width: \"200px\",\n    },\n  })\n);\n\nexport default function CustomAppbar() {\n  const classes = useStyles();\n  const [drawerState, setDrawerState] = React.useState<boolean>(false);\n  const toggleDrawer = () => (e: React.MouseEvent) => {\n    setDrawerState(!drawerState);\n  };\n  return (\n    <Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={toggleDrawer()}\n          >\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            To-do\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer anchor=\"left\" open={drawerState} onClose={toggleDrawer()}>\n        <List className={classes.drawerList}>\n          <ListItemLink primary=\"Inicio\" to=\"/\" />\n          <CategoryList />\n        </List>\n      </Drawer>\n    </Fragment>\n  );\n}\n","import React, { useState, Fragment } from \"react\";\nimport {\n  Fab,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n  makeStyles,\n  Theme,\n  createStyles,\n  Backdrop,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { Add as AddIcon } from \"@material-ui/icons\";\nimport { db } from \"../App\";\n\ntype TaskAddProps = {\n  updateTasks: () => void;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    floatbtn: {\n      position: \"absolute\",\n      top: \"90%\",\n      left: \"85%\",\n    },\n    modalbtn: {\n      width: \"50%\",\n    },\n  })\n);\n\nexport default function TaskAdd(props: TaskAddProps) {\n  const classes = useStyles();\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n  const [taskName, setTaskName] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const handleDialogClose = () => {\n    setShowDialog(false);\n  };\n  const handleDialogOpen = () => {\n    setShowDialog(true);\n  };\n  const add = () => {\n    setLoading(true);\n    setShowDialog(false);\n    const id = window.location.pathname.replace(\"/c/\", \"\");\n    db.table(\"tasks\")\n      .add({\n        name: taskName,\n        completed: false,\n        category: id,\n        created_at: new Date(),\n        updated_at: new Date(),\n      })\n      .then((e) => {\n        props.updateTasks();\n        setTaskName(\"\");\n        setLoading(false);\n      });\n  };\n  const update = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTaskName(e.target.value);\n  };\n  return (\n    <Fragment>\n      <Fab\n        className={classes.floatbtn}\n        onClick={handleDialogOpen}\n        color=\"primary\"\n        aria-label=\"add\"\n      >\n        <AddIcon />\n      </Fab>\n      <Dialog open={showDialog} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Add a task</DialogTitle>\n        <DialogContent>\n          <TextField\n            placeholder=\"Task name\"\n            value={taskName}\n            onChange={update}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button className={classes.modalbtn} color=\"primary\" onClick={add}>\n            Add\n          </Button>\n          <Button\n            className={classes.modalbtn}\n            color=\"secondary\"\n            onClick={handleDialogClose}\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Backdrop open={loading}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </Fragment>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  IconButton,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport {\n  RadioButtonUnchecked,\n  CheckCircleOutline,\n  Delete,\n} from \"@material-ui/icons\";\nimport { db } from \"../App\";\n\ntype TaskProps = {\n  id: number;\n  name: string;\n  completed: boolean;\n  category?: string;\n  updateTasks: () => void;\n};\n\nexport default function Task(props: TaskProps) {\n  const [completed, setCompleted] = useState<boolean>(props.completed);\n  const [deleting, setDeleting] = useState<boolean>(false);\n  const handleCheckClick = () => {\n    db.table(\"tasks\")\n      .update(props.id, {\n        updated_at: new Date(),\n        completed: !completed,\n      })\n      .then(() => {\n        setCompleted(!completed);\n      });\n  };\n  const deleteTask = () => {\n    setDeleting(true);\n    db.table(\"tasks\")\n      .delete(props.id)\n      .then(() => props.updateTasks())\n      .then(() => setDeleting(false));\n  };\n  return (\n    <ListItem button>\n      <ListItemIcon onClick={handleCheckClick}>\n        {completed ? <CheckCircleOutline /> : <RadioButtonUnchecked />}\n      </ListItemIcon>\n      <ListItemText primary={props.name} secondary={props.category} />\n      <ListItemSecondaryAction>\n        <IconButton onClick={deleteTask} edge=\"end\" aria-label=\"delete\">\n          {deleting ? <CircularProgress size=\"1rem\" /> : <Delete />}\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { db } from \"../App\";\nimport TaskAdd from \"../components/TaskAdd\";\nimport Task from \"../components/Task\";\nimport { List } from \"@material-ui/core\";\n\ntype TasksState = {\n  tasks: any[];\n  category: string;\n  mounted: boolean;\n  lastUrl: string;\n};\n\nexport default class Tasks extends React.Component<{}, TasksState> {\n  constructor(props = {}) {\n    super(props);\n    this.updateTasks = this.updateTasks.bind(this);\n    this.state = {\n      tasks: [],\n      category: window.location.pathname.replace(\"/c/\", \"\"),\n      mounted: false,\n      lastUrl: \"\",\n    };\n  }\n\n  public get urlCateg(): string {\n    return window.location.pathname.replace(\"/c/\", \"\");\n  }\n\n  componentDidMount() {\n    this.setState({\n      mounted: true,\n      lastUrl: this.urlCateg,\n    });\n    this.updateTasks();\n  }\n  componentWillUnmount() {\n    this.setState({ mounted: false });\n  }\n  componentDidUpdate() {\n    if (this.state.lastUrl !== this.urlCateg) {\n      this.updateTasks();\n    }\n  }\n  updateTasks() {\n    const id = this.urlCateg;\n    db.table(\"tasks\")\n      .where({ category: `${id}` })\n      .toArray()\n      .then((t) => this.setState({ tasks: t, lastUrl: this.urlCateg }));\n  }\n  render() {\n    return (\n      <Fragment>\n        <h1>Tasks - {this.urlCateg}</h1>\n        <List>\n          {this.state.tasks.map((t) => {\n            return (\n              <Task\n                key={t.id}\n                name={t.name}\n                completed={t.completed}\n                id={t.id}\n                updateTasks={this.updateTasks}\n              />\n            );\n          })}\n        </List>\n        <TaskAdd updateTasks={this.updateTasks} />\n      </Fragment>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { db } from \"../App\";\nimport { List } from \"@material-ui/core\";\nimport { ITask } from \"../database\";\nimport Task from \"./Task\";\n\ntype LastTasksState = {\n  tasks: ITask[];\n};\n\nexport default class LastTasks extends React.Component<{}, LastTasksState> {\n  constructor(props = {}) {\n    super(props);\n    this.state = {\n      tasks: [],\n    };\n    this.updateTasks = this.updateTasks.bind(this);\n  }\n  componentDidMount() {\n    this.updateTasks();\n  }\n  updateTasks() {\n    db.table(\"tasks\")\n      .orderBy(\"updated_at\")\n      .toArray()\n      .then((tasks) => this.setState({ tasks }));\n  }\n  render() {\n    return (\n      <Fragment>\n        <List>\n          {this.state.tasks.map((t, i) => {\n            return (\n              <Task\n                key={i}\n                name={t.name}\n                completed={t.completed}\n                id={t.id || 0}\n                updateTasks={this.updateTasks}\n                category={t.category}\n              />\n            );\n          })}\n        </List>\n      </Fragment>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport LastTasks from \"../components/LastTasks\";\n\nexport default function Home() {\n  return (\n    <Fragment>\n      <h1>Home</h1>\n      <LastTasks />\n    </Fragment>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { makeStyles, Theme, createStyles, Container } from \"@material-ui/core\";\nimport CustomLayout from \"./components/CustomLayout\";\nimport { Tasks, Home } from \"./views/views\";\nimport { Database } from \"./database\";\n\nexport const db = new Database();\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport default function App() {\n  const classes = useStyles();\n  return (\n    <Router>\n      <div className={classes.root}>\n        <CustomLayout />\n        <Container maxWidth=\"sm\">\n          <Switch>\n            <Route path=\"/c/:id\" component={Tasks} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n","import Dexie from \"dexie\";\n\nexport type ITask = {\n  id?: number;\n  name: string;\n  completed: boolean;\n  category: string;\n  created_at: Date;\n  updated_at: Date;\n};\n\nexport class Database extends Dexie {\n  tasks: Dexie.Table<ITask, number>;\n  constructor() {\n    super(\"Database\");\n    this.version(3).stores({\n      tasks: \"++id, name, completed, category, created_at, updated_at\",\n    });\n    this.tasks = this.table(\"tasks\");\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}